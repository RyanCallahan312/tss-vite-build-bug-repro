import ReactDiffViewer from "react-diff-viewer-continued";

function Page() {
	const before =
		'\r\n#sources code to connect to SQL database\r\nsource(file.path(Sys.getenv("CUSTOM_REPORTS_ROOT", "/Volumes/GoogleDrive/Shared drives/Custom Reports/"),"R Script Templates/bdbo_connect.R"))\r\n\r\n#sources code with various helper functions (see script for documentation)\r\nsource(file.path(Sys.getenv("CUSTOM_REPORTS_ROOT", "/Volumes/GoogleDrive/Shared drives/Custom Reports/"),"R Script Templates/2019_08_19_R_helper_file.R"))\r\n\r\nlibrary(readr)\r\nlibrary(lubridate)\r\nlibrary(dplyr)\r\nlibrary(tidyverse)\r\n\r\n# BEST PRACTICES: \r\n# Ensure that time range takes into account the difference between UTC and EST, 4 hour difference during daylight savings time (March - November), 5 hour difference otherwise\r\n# List out (either in script or google doc) the categories/brands you pull\r\n\r\nall_ads <- dbGetQuery(bdbo, \'SELECT DISTINCT\r\n  atlas_parent_categories.name AS atlas_parent_category,\r\n  atlas_categories.id AS atlas_category_id,\r\n  atlas_categories.name AS atlas_category_name,\r\n  atlas_brands.id as atlas_brand_id,\r\n  atlas_brands.name as atlas_brand_name,\r\n  atlas_super_products.id as atlas_super_product_id,\r\n  atlas_super_products.name as atlas_super_product,\r\n  atlas_products.id as atlas_product_id,\r\n  atlas_products.name as atlas_product_name,\r\n  traction_entities.id as traction_entity_id,\r\n  traction_entities.name as traction_entity_name,\r\n  tv_ad_airings.id as tv_ad_airings_id,\r\n  tv_ad_airings.network_name,\r\n  tv_ad_airings.show_title,\r\n  tv_ads.id as tv_ad_id,\r\n  CONVERT_TZ(tv_ad_airings.air_date_et, "UTC", "US/Eastern") AS "air_date_et",\r\n  tv_ad_airings.day_part_et as daypart,\r\n  tv_ad_airings.show_genre,\r\n  tv_ad_airings.show_sub_genre,\r\n  tv_ad_airings.show_episode,\r\n  tv_ads.creative_id,\r\n  tv_ads.duration,\r\n  tv_ad_airings.impressions,\r\n  tv_ad_airings.impression_type,\r\n  tv_ad_airings.estimated_spend,\r\n  tv_ad_airings.live_event as live_airing,\r\n  tv_ad_airings.special_event,\r\n  tv_ad_airings.new_episode,\r\n  tv_ad_airing_metrics.sev as SEV,\r\n  tv_ad_airing_metrics.added_traction,\r\n  tv_ad_airing_metrics.duration_factor,\r\n  tv_ad_airing_metrics.entity_factor,\r\n  tv_ad_airing_metrics.impressions_factor,\r\n  tv_ad_airing_metrics.network_hour_factor,\r\n  tv_ad_airing_metrics.demographic_factor\r\n  # tv_ad_airings.pod_id,\r\n  # tv_ad_airings.pod_order,\r\n  # tv_ad_airings.pod_abmyz,\r\n  # tv_ad_airings.source_type,\r\n  # ava_categories.name AS "ava_category_name"\r\nFROM `tv_ad_airings`\r\nJOIN (\r\n  SELECT *\r\n  FROM (\r\n    SELECT tv_ad_airings.id as taa_id, traction_entities.id as te_id, atlas_products.id as product_id\r\n    FROM tv_ad_airings \r\n    LEFT JOIN `tv_ads` ON `tv_ads`.`id` = `tv_ad_airings`.`tv_ad_id`\r\n    LEFT JOIN `atlas_products_tv_ads` ON `atlas_products_tv_ads`.`tv_ad_id` = `tv_ads`.`id` AND atlas_products_tv_ads.deleted_at IS NULL\r\n    LEFT JOIN `atlas_products` ON `atlas_products`.`id` = `atlas_products_tv_ads`.`atlas_product_id`\r\n    LEFT JOIN `atlas_product_traction_entities` ON `atlas_product_traction_entities`.`atlas_product_id` = `atlas_products`.`id` AND atlas_product_traction_entities.deleted_at IS NULL\r\n    LEFT JOIN `traction_entities` ON `traction_entities`.`id` = `atlas_product_traction_entities`.`traction_entity_id` AND `traction_entities`.`deleted_at` IS NULL AND traction_entities.tier IN (1, 2)\r\n    LEFT JOIN `atlas_super_products` ON `atlas_super_products`.`id` = `atlas_products`.`atlas_super_product_id`\r\n    LEFT JOIN `atlas_categories` ON `atlas_categories`.id = `atlas_super_products`.category_id\r\n    LEFT JOIN `atlas_parent_categories` ON `atlas_parent_categories`.id = `atlas_categories`.parent_category_id\r\n    LEFT JOIN `atlas_brands` ON `atlas_brands`.`id` = `atlas_super_products`.`brand_id`\r\n    LEFT JOIN tv_ad_airing_metrics ON traction_entities.id = tv_ad_airing_metrics.traction_entity_id AND tv_ad_airings.id = tv_ad_airing_metrics.tv_ad_airing_id\r\n    WHERE traction_entities.id IS NOT NULL\r\n      AND atlas_products_tv_ads.placement_type = "primary"\r\n      AND tv_ad_airings.group_id = "Common"\r\n      AND tv_ad_airings.reach = "National"\r\n      AND tv_ad_airings.air_date_et >= "2024-06-01 05"\r\n      AND tv_ad_airings.air_date_et < "2025-06-01 05"\r\n      AND tv_ad_airings.day_part_et NOT IN ("Overnight")\r\n      AND atlas_brands.name IN ("DirecTV","Xfinity","Comcast", "Dish Network","Spectrum","Sling TV","YouTube TV","FuboTV", "Hulu + Live TV","Philo")\r\n      AND traction_entities.normalization_group != "TV Promos"\r\n      AND tv_ad_airings.impressions > 50000\r\n      ORDER BY atlas_products_tv_ads.placement_type ASC, traction_entities.metrics_priority DESC\r\n  ) a\r\n  GROUP BY taa_id\r\n  ORDER BY NULL\r\n) b on tv_ad_airings.id = b.taa_id\r\nLEFT JOIN `tv_ads` ON `tv_ads`.`id` = `tv_ad_airings`.`tv_ad_id`\r\nLEFT JOIN `atlas_products_tv_ads` ON `atlas_products_tv_ads`.`tv_ad_id` = `tv_ads`.`id` AND atlas_products_tv_ads.deleted_at IS NULL\r\nLEFT JOIN `atlas_products` ON `atlas_products`.`id` = b.product_id\r\nLEFT JOIN atlas_super_products ON atlas_products.atlas_super_product_id = atlas_super_products.id\r\nLEFT JOIN atlas_categories ON atlas_categories.id = atlas_super_products.category_id\r\nLEFT JOIN atlas_parent_categories ON atlas_parent_categories.id = atlas_categories.parent_category_id\r\nLEFT JOIN atlas_brands ON atlas_super_products.brand_id = atlas_brands.id\r\nLEFT JOIN `atlas_product_traction_entities` ON `atlas_product_traction_entities`.`atlas_product_id` = `atlas_products`.`id` AND atlas_product_traction_entities.deleted_at IS NULL\r\nLEFT JOIN `traction_entities` ON `traction_entities`.`id` = `atlas_product_traction_entities`.`traction_entity_id` AND `traction_entities`.`deleted_at` IS NULL\r\nLEFT JOIN ava_category_traction_entities ON ava_category_traction_entities.traction_entity_id = traction_entities.id\r\nLEFT JOIN ava_categories ON ava_categories.id = ava_category_traction_entities.ava_category_id\r\nLEFT JOIN tv_ad_airing_metrics ON tv_ad_airings.id = tv_ad_airing_metrics.tv_ad_airing_id AND traction_entities.id = tv_ad_airing_metrics.traction_entity_id\r\nWHERE traction_entities.tier IN (1, 2)\r\n  AND traction_entities.deleted_at IS NULL\r\n  AND atlas_products_tv_ads.placement_type = "primary"\r\n  AND IF(traction_entities.id = b.te_id, 1, 0) = 1;\r\n\')\r\n\r\nwrite.csv(all_ads, file=file.path(Sys.getenv("CUSTOM_REPORTS_ROOT", "/Volumes/GoogleDrive/Shared drives/Custom Reports/"),"New Verticals/DirecTV/Custom Reports/2025-06-09 Media Planner/2025-06-09 DirecTV Media Partner Analysis_data.csv"), row.names=F)\r\nall_ads <- read.csv(file=file.path(Sys.getenv("CUSTOM_REPORTS_ROOT", "/Volumes/GoogleDrive/Shared drives/Custom Reports/"),"New Verticals/DirecTV/Custom Reports/2025-06-09 Media Planner/2025-06-09 DirecTV Media Partner Analysis_data.csv"), header=T, stringsAsFactors=F)\r\n\r\n# process data\r\nsource(file.path(Sys.getenv("CUSTOM_REPORTS_ROOT", "/Volumes/GoogleDrive/Shared drives/Custom Reports/"),"R Script Templates/2019_08_19_data_processing_template.R"))\r\n\r\n# 2019 Football Adjustments\r\nsource(file.path(Sys.getenv("CUSTOM_REPORTS_ROOT", "/Volumes/GoogleDrive/Shared drives/Custom Reports/"),"R Script Templates/sports_adjustments.R"))\r\n\r\n#############################\r\n# Compute SER Index\r\n#############################\r\n\r\n# raw SER calculation\r\nall_ads$SER <- all_ads$added_traction / all_ads$duration / all_ads$impressions * 1e8\r\n# program SER - normalize for all but network_hour\r\nall_ads$base_norm_SER <- all_ads$SER / all_ads$duration_factor / all_ads$entity_factor / all_ads$impressions_factor / all_ads$demographic_factor\r\n# "Brand SER"- normalize for entity (Strength of entity separate from network + creative)\r\n# all_ads$base_norm_SER <- all_ads$SER / all_ads$duration_factor / all_ads$impressions_factor / all_ads$network_hour_factor\r\n# creative SER\r\n# all_ads$base_norm_SER <- all_ads$SER / all_ads$duration_factor / all_ads$entity_factor / all_ads$impressions_factor / all_ads$network_hour_factor\r\nall_ads$norm_SER <- all_ads$base_norm_SER\r\nall_ads$log_norm_SER <- log(all_ads$norm_SER)\r\nall_ads <- all_ads[which(!is.na(all_ads$norm_SER)),]\r\n\r\n#########################\r\n### DATA ADJUSTMENTS\r\n#########################\r\n\r\nall_ads$network_parent <- all_ads$network_name\r\nall_ads$network_parent[which(all_ads$network_name %in% nbcu_networks)] <- \'NBCUniversal\'\r\nall_ads$network_parent[which(all_ads$network_name %in% viacom_networks)] <- \'Paramount Media Networks\'\r\nall_ads$network_parent[which(all_ads$network_name %in% twdc_networks)] <- \'The Walt Disney Company\'\r\nall_ads$network_parent[which(all_ads$network_name %in% wbd_networks)] <- \'Warner Bros. Discovery\'\r\nall_ads$network_parent[which(all_ads$network_name %in% ane_networks)] <- \'A+E Networks\'\r\nall_ads$network_parent[which(all_ads$network_name %in% univision_networks)] <- \'Univision Networks\'\r\nall_ads$network_parent[which(all_ads$network_name %in% fox_networks)] <- \'Fox Networks\'\r\nall_ads$network_parent[which(all_ads$network_name %in% amc_networks)] <- \'AMC Networks\'\r\nall_ads$network_parent[which(all_ads$network_name %in% crownmedia_networks)] <- \'Hallmark Media Networks\'\r\nall_ads$network_parent[which(all_ads$network_name %in% c(\'NewsNation\',\'CW\'))] <- \'Nexstar Media Group\'\r\n\r\n###\r\n###\r\n#Benchmark\r\nall_ads$group1 <- \'All Networks\'\r\n\r\n#By Network Family\r\nall_ads$group2 <- \'Other\'\r\nall_ads$group2 <- all_ads$network_parent\r\n\r\n#By Network \r\nall_ads$group3 <- \'Other\'\r\nall_ads$group3 <- paste(all_ads$network_parent,"*",all_ads$network_name,sep="")\r\n\r\n#By Network By Daypart\r\nall_ads$group4 <- \'Other\'\r\nall_ads$group4 <- paste(all_ads$network_parent,"*",all_ads$network_name,"*",all_ads$daypart,sep="")\r\n\r\n#Benchmark by Daypart\r\nall_ads$group5 <- \'Other\'\r\nall_ads$group5 <- paste("All Networks*",all_ads$daypart,sep="")\r\n\r\nall_ads$custom_category <- \'Other\'\r\nall_ads$custom_category[which(all_ads$atlas_brand_name %in% c(\'DirecTV\',\'Xfinity\',\'Comcast\', \'Dish Network\',\'Spectrum\'))] <- \'MVPD Competitive Set\'\r\nall_ads$custom_category[which(all_ads$atlas_brand_name %in% c(\'Sling TV\',\'YouTube TV\',\'FuboTV\', \'Hulu + Live TV\',\'Philo\'))] <- \'vMVPD Competitive Set\'\r\n\r\n\r\n\r\n####\r\n####\r\n\r\n####################################################\r\n#### Helper Functions\r\n####################################################\r\n\r\ngenerate_afa <- function(df, ngroups = 1, benchmark_group, breakouts, bygroup = \'name_to_use,group\') {\r\n  group_to_use <- benchmark_group\r\n  \r\n  if(group_to_use != \'all\') {\r\n    ind <- which(df$group1 == group_to_use)\r\n  } else {\r\n    ind <- seq(1,nrow(df))\r\n  }\r\n  ser_avg <- exp(weighted_mean_with_exclude(log(df$norm_SER), w=sqrt(df$impressions/1e6*df$duration), q1=0.1, q2=0.9))\r\n  mean_imps <- mean(df$impressions) / 1e6\r\n  \r\n  # Calculate norm_SER and log_norm_SER using the benchmark average SER\r\n  df <- df %>% dplyr::mutate(norm_SER = .data$norm_SER * 100 / ser_avg,\r\n                             log_norm_SER = log(.data$norm_SER),\r\n                             name_to_use = breakouts)\r\n  \r\n  afa_final = data.table()\r\n  # Create summary table by each breakout(if specified) and group\r\n  for (i in 1:ngroups) {\r\n    bygroup_string = sub(\'group\', paste(\'group\', i, sep = \'\'), bygroup)\r\n    \r\n    afa=data.frame(as.data.table(df)[,list(\r\n      total_SEV=sum(added_traction, na.rm=T),\r\n      total_SEV_imps_adj=sum(added_traction / impressions_factor_to_adj, na.rm=T),\r\n      median_SEV=weightedMedian(added_traction / impressions_factor_to_adj, num_ads_to_count, na.rm=T),\r\n      mean_SEV=weighted.mean(added_traction, num_ads_to_count, na.rm=T),\r\n      mean_SER_all=exp(weighted_mean_with_exclude(log_norm_SER, num_ads_to_count*sqrt(grossed_impressions/1e6*duration), q1=0.1,q2=0.9)),\r\n      total_imps=sum(impressions/1e6, na.rm=T),\r\n      median_imps=weightedMedian(grossed_impressions/1e6, num_ads_to_count, na.rm=T),\r\n      mean_imps=weighted.mean(grossed_impressions/1e6, num_ads_to_count, na.rm=T),\r\n      num_ads=ceiling(min(length(unique(tv_ad_airings_id)), sum(num_ads_to_count))),\r\n      num_ads_to_use=ceiling(min(length(unique(tv_ad_airings_id)), sum(num_ads_to_count))),\r\n      mean_duration=weighted.mean(duration, grossed_impressions/1e6*num_ads_to_count),\r\n      weight_all=sum(num_ads_to_count*sqrt(impressions/1e6*duration), na.rm=T)\r\n    ),by=bygroup_string])\r\n    \r\n    \r\n    names(afa)[which(names(afa) == paste("group", i, sep = \'\'))] <- \'group\'\r\n    \r\n    assign(paste(\'afa\', i, sep = ""), afa)\r\n    afa_final = rbind(afa_final, afa)\r\n  }\r\n  \r\n  if(group_to_use == \'all\') {\r\n    afa_final = afa_final %>%\r\n      distinct() %>%\r\n      dplyr::group_by(.data$name_to_use) %>%\r\n      dplyr::mutate(ad_multiplier = .data$mean_SER_all / 100 * .data$mean_imps / mean(.data$mean_imps)) %>%\r\n      arrange(-mean_SER_all) %>%\r\n      ungroup()\r\n  } else {\r\n    afa_final = afa_final %>%\r\n      distinct() %>%\r\n      filter(!group %in% c(\'IGNORE\', \'Other\', \'Normal\')) %>%\r\n      group_by(name_to_use) %>%\r\n      dplyr::mutate(mean_SER_all = mean_SER_all * 100 / mean(mean_SER_all[group == group_to_use]),\r\n                    ad_multiplier = mean_SER_all / 100 * mean_imps / mean(mean_imps[group == group_to_use])) %>%\r\n      dplyr::arrange(name_to_use, -mean_SER_all) %>%\r\n      ungroup()\r\n  }\r\n  \r\n  bygroup_vars = unlist(strsplit(bygroup, ","))\r\n  afa_final <- afa_final %>% dplyr::select(all_of(bygroup_vars), num_ads, mean_imps, mean_SER_all, ad_multiplier)\r\n  return(afa_final)\r\n}\r\n\r\n# format_columns <- function(df, df_names, var_list=c("num_ads","mean_SER_all","ad_multiplier"), nads_filter = 0) {\r\nformat_columns <- function(df, df_names, var_list=c("num_ads","mean_SER_all","ad_multiplier"), nads_filter = 5) {\r\n  df <- df %>%\r\n    arrange(-mean_SER_all_alladv)\r\n  \r\n  for(i in seq_along(df_names)) {\r\n    vars_list = var_list\r\n    if(i != 1){\r\n      vars_list = paste(var_list, df_names[i], sep = \'_\') \r\n    }\r\n    df <- df %>% \r\n      mutate_at(vars_list[2:length(vars_list)], list(~ ifelse(!!sym(vars_list[1]) < nads_filter | is.na(!!sym(vars_list[1])), \'-\', .))) %>% \r\n      mutate_at(vars_list[1], list(~ ifelse(is.na(!!sym(vars_list[1])), 0, .)))\r\n  }\r\n  \r\n  df <- df %>% select(-(starts_with("mean_imps") & !ends_with("alladv"))) %>% \r\n    relocate(mean_imps_alladv, .before = num_ads)\r\n  return(df)\r\n}\r\n\r\nmerge_columns <- function(df_list, bygroup){\r\n  byvector <- unlist(strsplit(bygroup, ","))\r\n  \r\n  stopifnot(length(df_list) > 0)\r\n  combined <- df_list[[1]]\r\n  for(i in seq_along(df_list[-1])) {\r\n    this_df <- df_list[[i+1]]\r\n    df_name <- coalesce(names(df_list)[[i+1]], as.character(i+1))\r\n    combined <- merge(combined, this_df, by=byvector, all=T, suffix = c("",paste0("_",df_name)))\r\n  }\r\n  return(combined)\r\n}\r\n\r\ngenerate_upfront_page <- function(dataset, vars_to_use, values_to_use, benchmark_group = \'all\', ngroups=1,bygroup_var){\r\n  df_list <- list()\r\n  \r\n  for(i in seq_along(vars_to_use)){\r\n    print(paste("  ",letters[i], "Generating", values_to_use[[i]], "column..."))\r\n    df_list[[i]] <- generate_afa(df = dataset %>% filter(!!sym(vars_to_use[i]) == values_to_use[i]), benchmark_group = benchmark_group, ngroups=ngroups, breakouts = "All Airings", bygroup=bygroup_var)  \r\n  }\r\n  print(paste("  ",letters[length(vars_to_use) + 1], "Generating", "All Advertisers", "column..."))\r\n  df_list[[length(vars_to_use) + 1]] <- generate_afa(df = dataset, benchmark_group = benchmark_group, ngroups=ngroups, breakouts = "All Airings", bygroup=bygroup_var)\r\n  \r\n  names(df_list) <- c(tolower(values_to_use), "alladv")\r\n  \r\n  upfront_page <- merge_columns(df_list, bygroup_var)\r\n  upfront_page <- format_columns(upfront_page, names(df_list), var_list = c(\'num_ads\', \'mean_SER_all\', \'ad_multiplier\'))\r\n  upfront_page <- upfront_page %>% select(-starts_with(\'name_to_use\'))\r\n  return(upfront_page)\r\n}\r\n\r\n###\r\n####\r\n\r\ngenerate_upfront <- function(all_ads, vars_to_use, values_to_use, catplus) {\r\n  media_partner_analysis <- list()\r\n  \r\n  print("1. Generating ELTV Network Family Analysis")\r\n  media_partner_analysis[[1]] <- generate_upfront_page(all_ads %>% filter(!(network_name %in% spanish_networks)),\r\n                                                       vars_to_use = vars_to_use,\r\n                                                       values_to_use = values_to_use,\r\n                                                       benchmark_group = \'All Networks\',\r\n                                                       ngroups = 2,\r\n                                                       bygroup_var = \'name_to_use,group\') %>% \r\n    filter(num_ads_alladv >= 1) \r\n  \r\n  print("2. Generating ELTV Network Analysis")\r\n  media_partner_analysis[[2]] <- generate_upfront_page(all_ads %>% filter(!(network_name %in% spanish_networks)),\r\n                                                       vars_to_use = vars_to_use,\r\n                                                       values_to_use = values_to_use,\r\n                                                       benchmark_group = \'All Networks\',\r\n                                                       ngroups = 3,\r\n                                                       bygroup_var = \'name_to_use,group\') %>% \r\n    filter(num_ads_alladv >= 1)\r\n  \r\n  print("3. Generating SLTV Network Analysis")\r\n  media_partner_analysis[[3]] <- generate_upfront_page(all_ads %>% filter(network_name %in% spanish_networks),\r\n                                                       vars_to_use = vars_to_use,\r\n                                                       values_to_use = values_to_use,\r\n                                                       benchmark_group = \'All Networks\',\r\n                                                       ngroups = 3,\r\n                                                       bygroup_var = \'name_to_use,group\') %>%  \r\n    filter(num_ads_alladv >= 1)\r\n  \r\n  print("4. Generating ELTV Network-Daypart Analysis")\r\n  media_partner_analysis[[4]] <- generate_upfront_page(all_ads %>% filter(!(network_name %in% spanish_networks)),\r\n                                                       vars_to_use = vars_to_use,\r\n                                                       values_to_use = values_to_use,\r\n                                                       benchmark_group = \'All Networks\',\r\n                                                       ngroups = 5,\r\n                                                       bygroup_var = \'name_to_use,group\') %>%  \r\n    filter(num_ads_alladv >= 1)\r\n  \r\n  # Network\r\n  print("5. Generating SLTV Network-Daypart Analysis")\r\n  media_partner_analysis[[5]] <- generate_upfront_page(all_ads %>% filter(network_name %in% spanish_networks),\r\n                                                       vars_to_use = vars_to_use,\r\n                                                       values_to_use = values_to_use,\r\n                                                       benchmark_group = \'All Networks\',\r\n                                                       ngroups = 5,\r\n                                                       bygroup_var = \'name_to_use,group\') %>%  \r\n    filter(num_ads_alladv >= 1)\r\n  \r\n  \r\n  names(media_partner_analysis) <- c("eltv_network_family", "eltv_network", "sltv_network", "eltv_network_daypart", "sltv_network_daypart")\r\n  return(media_partner_analysis)\r\n}\r\n\r\n####################################################\r\n#### Define which advertiser to analyze for here \r\n####################################################\r\n## Options to use for category type:\r\n# analysis_category, atlas_parent_category, atlas_category_name\r\nprimary_brand <- "DirecTV"\r\nprimary_category <- unique((all_ads$atlas_category_name[which(all_ads$atlas_brand_name == primary_brand)]))\r\nprimary_category <- primary_category[!is.na(primary_category)]\r\nprint(primary_category)\r\n\r\n\r\nmedia_partner_analysis <- generate_upfront(all_ads, \r\n                                           values_to_use = c(\'DirecTV\',\'Xfinity\',\'Sling TV\', \'Dish Network\', \'MVPD Competitive Set\', \'vMVPD Competitive Set\'),\r\n                                           vars_to_use = c(\'atlas_brand_name\',\'atlas_brand_name\',\'atlas_brand_name\',\'atlas_brand_name\',\'custom_category\',\'custom_category\'),\r\n                                           catplus = FALSE\r\n)\r\n\r\n\r\nanalysis_fp <- file.path(Sys.getenv("CUSTOM_REPORTS_ROOT", "/Volumes/GoogleDrive/Shared drives/Custom Reports/"),"New Verticals/DirecTV/Custom Reports/2025-06-09 Media Planner")\r\n\r\ndir.create(analysis_fp, showWarnings = FALSE, recursive = TRUE)\r\n\r\nfor(i in seq_along(media_partner_analysis)) {\r\n  write_excel_csv(media_partner_analysis[[i]], file = file.path(analysis_fp, paste("2025-06-09 DirecTV Media Partner Analysis_", names(media_partner_analysis)[i], ".csv", sep = "")))\r\n}\r\n';
	const after =
		'\r\n#sources code to connect to SQL database\r\nsource(file.path(Sys.getenv("CUSTOM_REPORTS_ROOT", "/Volumes/GoogleDrive/Shared drives/Custom Reports/"),"R Script Templates/nielsen_mutual_client_bdbo_connect"))\r\n\r\n#sources code with various helper functions (see script for documentation)\r\nsource(file.path(Sys.getenv("CUSTOM_REPORTS_ROOT", "/Volumes/GoogleDrive/Shared drives/Custom Reports/"),"R Script Templates/2019_08_19_R_helper_file.R"))\r\n\r\nlibrary(readr)\r\nlibrary(lubridate)\r\nlibrary(dplyr)\r\nlibrary(tidyverse)\r\n\r\n# BEST PRACTICES: \r\n# Ensure that time range takes into account the difference between UTC and EST, 4 hour difference during daylight savings time (March - November), 5 hour difference otherwise\r\n# List out (either in script or google doc) the categories/brands you pull\r\n\r\nclient <- \'directv\';\r\nsql <- \'SELECT DISTINCT\r\n  atlas_parent_categories.name AS atlas_parent_category,\r\n  atlas_categories.id AS atlas_category_id,\r\n  atlas_categories.name AS atlas_category_name,\r\n  atlas_brands.id as atlas_brand_id,\r\n  atlas_brands.name as atlas_brand_name,\r\n  atlas_super_products.id as atlas_super_product_id,\r\n  atlas_super_products.name as atlas_super_product,\r\n  atlas_products.id as atlas_product_id,\r\n  atlas_products.name as atlas_product_name,\r\n  traction_entities.id as traction_entity_id,\r\n  traction_entities.name as traction_entity_name,\r\n  tv_ad_airings.id as tv_ad_airings_id,\r\n  tv_ad_airings.network_name,\r\n  tv_ad_airings.show_title,\r\n  tv_ads.id as tv_ad_id,\r\n  CONVERT_TZ(tv_ad_airings.air_date_et, "UTC", "US/Eastern") AS "air_date_et",\r\n  tv_ad_airings.day_part_et as daypart,\r\n  tv_ad_airings.show_genre,\r\n  tv_ad_airings.show_sub_genre,\r\n  tv_ad_airings.show_episode,\r\n  tv_ads.creative_id,\r\n  tv_ads.duration,\r\n  IF_MUTUAL_CLIENT(IF(`tv_ad_airings`.`nielsen_impressions` is null, `tv_ad_airings`.`impressions`, COALESCE(`tv_ad_airings`.`nielsen_impressions`, `tv_ad_airings`.`impressions`)), `tv_ad_airings`.`impressions`) as impressions,\r\n  IF_MUTUAL_CLIENT(IF(`tv_ad_airings`.`nielsen_impressions` is null, `tv_ad_airings`.`impression_type`, "Nielsen MDE"), `tv_ad_airings`.`impression_type`) as impression_type,\r\n  tv_ad_airings.estimated_spend,\r\n  tv_ad_airings.live_event as live_airing,\r\n  tv_ad_airings.special_event,\r\n  tv_ad_airings.new_episode,\r\n  tv_ad_airing_metrics.sev as SEV,\r\n  tv_ad_airing_metrics.added_traction,\r\n  tv_ad_airing_metrics.duration_factor,\r\n  tv_ad_airing_metrics.entity_factor,\r\n  IF_MUTUAL_CLIENT(IF(`tv_ad_airings`.`nielsen_impressions` is null, `tv_ad_airing_metrics`.`impressions_factor`, COALESCE(`tv_ad_airing_metrics`.`nielsen_impressions_factor`, `tv_ad_airing_metrics`.`impressions_factor`)), `tv_ad_airing_metrics`.`impressions_factor`) as impressions_factor,\r\n  tv_ad_airing_metrics.network_hour_factor,\r\n  tv_ad_airing_metrics.demographic_factor\r\n  # tv_ad_airings.pod_id,\r\n  # tv_ad_airings.pod_order,\r\n  # tv_ad_airings.pod_abmyz,\r\n  # tv_ad_airings.source_type,\r\n  # ava_categories.name AS "ava_category_name"\r\nFROM `tv_ad_airings`\r\nJOIN (\r\n  SELECT *\r\n  FROM (\r\n    SELECT tv_ad_airings.id as taa_id, traction_entities.id as te_id, atlas_products.id as product_id\r\n    FROM tv_ad_airings \r\n    LEFT JOIN `tv_ads` ON `tv_ads`.`id` = `tv_ad_airings`.`tv_ad_id`\r\n    LEFT JOIN `atlas_products_tv_ads` ON `atlas_products_tv_ads`.`tv_ad_id` = `tv_ads`.`id` AND atlas_products_tv_ads.deleted_at IS NULL\r\n    LEFT JOIN `atlas_products` ON `atlas_products`.`id` = `atlas_products_tv_ads`.`atlas_product_id`\r\n    LEFT JOIN `atlas_product_traction_entities` ON `atlas_product_traction_entities`.`atlas_product_id` = `atlas_products`.`id` AND atlas_product_traction_entities.deleted_at IS NULL\r\n    LEFT JOIN `traction_entities` ON `traction_entities`.`id` = `atlas_product_traction_entities`.`traction_entity_id` AND `traction_entities`.`deleted_at` IS NULL AND traction_entities.tier IN (1, 2)\r\n    LEFT JOIN `atlas_super_products` ON `atlas_super_products`.`id` = `atlas_products`.`atlas_super_product_id`\r\n    LEFT JOIN `atlas_categories` ON `atlas_categories`.id = `atlas_super_products`.category_id\r\n    LEFT JOIN `atlas_parent_categories` ON `atlas_parent_categories`.id = `atlas_categories`.parent_category_id\r\n    LEFT JOIN `atlas_brands` ON `atlas_brands`.`id` = `atlas_super_products`.`brand_id`\r\n    LEFT JOIN tv_ad_airing_metrics ON traction_entities.id = tv_ad_airing_metrics.traction_entity_id AND tv_ad_airings.id = tv_ad_airing_metrics.tv_ad_airing_id\r\n    WHERE traction_entities.id IS NOT NULL\r\n      AND atlas_products_tv_ads.placement_type = "primary"\r\n      AND tv_ad_airings.group_id = "Common"\r\n      AND tv_ad_airings.reach = "National"\r\n      AND tv_ad_airings.air_date_et >= "2024-06-01 05"\r\n      AND tv_ad_airings.air_date_et < "2025-06-01 05"\r\n      AND tv_ad_airings.day_part_et NOT IN ("Overnight")\r\n      AND atlas_brands.name IN ("DirecTV","Xfinity","Comcast", "Dish Network","Spectrum","Sling TV","YouTube TV","FuboTV", "Hulu + Live TV","Philo")\r\n      AND traction_entities.normalization_group != "TV Promos"\r\n      AND tv_ad_airings.impressions > 50000\r\n      ORDER BY atlas_products_tv_ads.placement_type ASC, traction_entities.metrics_priority DESC\r\n  ) a\r\n  GROUP BY taa_id\r\n  ORDER BY NULL\r\n) b on tv_ad_airings.id = b.taa_id\r\nLEFT JOIN `tv_ads` ON `tv_ads`.`id` = `tv_ad_airings`.`tv_ad_id`\r\nLEFT JOIN `atlas_products_tv_ads` ON `atlas_products_tv_ads`.`tv_ad_id` = `tv_ads`.`id` AND atlas_products_tv_ads.deleted_at IS NULL\r\nLEFT JOIN `atlas_products` ON `atlas_products`.`id` = b.product_id\r\nLEFT JOIN atlas_super_products ON atlas_products.atlas_super_product_id = atlas_super_products.id\r\nLEFT JOIN atlas_categories ON atlas_categories.id = atlas_super_products.category_id\r\nLEFT JOIN atlas_parent_categories ON atlas_parent_categories.id = atlas_categories.parent_category_id\r\nLEFT JOIN atlas_brands ON atlas_super_products.brand_id = atlas_brands.id\r\nLEFT JOIN `atlas_product_traction_entities` ON `atlas_product_traction_entities`.`atlas_product_id` = `atlas_products`.`id` AND atlas_product_traction_entities.deleted_at IS NULL\r\nLEFT JOIN `traction_entities` ON `traction_entities`.`id` = `atlas_product_traction_entities`.`traction_entity_id` AND `traction_entities`.`deleted_at` IS NULL\r\nLEFT JOIN ava_category_traction_entities ON ava_category_traction_entities.traction_entity_id = traction_entities.id\r\nLEFT JOIN ava_categories ON ava_categories.id = ava_category_traction_entities.ava_category_id\r\nLEFT JOIN tv_ad_airing_metrics ON tv_ad_airings.id = tv_ad_airing_metrics.tv_ad_airing_id AND traction_entities.id = tv_ad_airing_metrics.traction_entity_id\r\nWHERE traction_entities.tier IN (1, 2)\r\n  AND traction_entities.deleted_at IS NULL\r\n  AND atlas_products_tv_ads.placement_type = "primary"\r\n  AND IF(traction_entities.id = b.te_id, 1, 0) = 1;\';\r\nall_ads <- dbGetNielsenMutualClientQuery(bdbo, sql, client)\r\n\r\nwrite.csv(all_ads, file=file.path(Sys.getenv("CUSTOM_REPORTS_ROOT", "/Volumes/GoogleDrive/Shared drives/Custom Reports/"),"New Verticals/DirecTV/Custom Reports/2025-06-09 Media Planner/2025-06-09 DirecTV Media Partner Analysis_data.csv"), row.names=F)\r\nall_ads <- read.csv(file=file.path(Sys.getenv("CUSTOM_REPORTS_ROOT", "/Volumes/GoogleDrive/Shared drives/Custom Reports/"),"New Verticals/DirecTV/Custom Reports/2025-06-09 Media Planner/2025-06-09 DirecTV Media Partner Analysis_data.csv"), header=T, stringsAsFactors=F)\r\n\r\n# process data\r\nsource(file.path(Sys.getenv("CUSTOM_REPORTS_ROOT", "/Volumes/GoogleDrive/Shared drives/Custom Reports/"),"R Script Templates/2019_08_19_data_processing_template.R"))\r\n\r\n# 2019 Football Adjustments\r\nsource(file.path(Sys.getenv("CUSTOM_REPORTS_ROOT", "/Volumes/GoogleDrive/Shared drives/Custom Reports/"),"R Script Templates/sports_adjustments.R"))\r\n\r\n#############################\r\n# Compute SER Index\r\n#############################\r\n\r\n# raw SER calculation\r\nall_ads$SER <- all_ads$sev / all_ads$duration / all_ads$impressions * 1e8\r\n# program SER - normalize for all but network_hour\r\nall_ads$base_norm_SER <- all_ads$SER / all_ads$duration_factor / all_ads$entity_factor / all_ads$impressions_factor / all_ads$demographic_factor\r\n# "Brand SER"- normalize for entity (Strength of entity separate from network + creative)\r\n# all_ads$base_norm_SER <- all_ads$SER / all_ads$duration_factor / all_ads$impressions_factor / all_ads$network_hour_factor\r\n# creative SER\r\n# all_ads$base_norm_SER <- all_ads$SER / all_ads$duration_factor / all_ads$entity_factor / all_ads$impressions_factor / all_ads$network_hour_factor\r\nall_ads$norm_SER <- all_ads$base_norm_SER\r\nall_ads$log_norm_SER <- log(all_ads$norm_SER)\r\nall_ads <- all_ads[which(!is.na(all_ads$norm_SER)),]\r\n\r\n#########################\r\n### DATA ADJUSTMENTS\r\n#########################\r\n\r\nall_ads$network_parent <- all_ads$network_name\r\nall_ads$network_parent[which(all_ads$network_name %in% nbcu_networks)] <- \'NBCUniversal\'\r\nall_ads$network_parent[which(all_ads$network_name %in% viacom_networks)] <- \'Paramount Media Networks\'\r\nall_ads$network_parent[which(all_ads$network_name %in% twdc_networks)] <- \'The Walt Disney Company\'\r\nall_ads$network_parent[which(all_ads$network_name %in% wbd_networks)] <- \'Warner Bros. Discovery\'\r\nall_ads$network_parent[which(all_ads$network_name %in% ane_networks)] <- \'A+E Networks\'\r\nall_ads$network_parent[which(all_ads$network_name %in% univision_networks)] <- \'Univision Networks\'\r\nall_ads$network_parent[which(all_ads$network_name %in% fox_networks)] <- \'Fox Networks\'\r\nall_ads$network_parent[which(all_ads$network_name %in% amc_networks)] <- \'AMC Networks\'\r\nall_ads$network_parent[which(all_ads$network_name %in% crownmedia_networks)] <- \'Hallmark Media Networks\'\r\nall_ads$network_parent[which(all_ads$network_name %in% c(\'NewsNation\',\'CW\'))] <- \'Nexstar Media Group\'\r\n\r\n###\r\n###\r\n#Benchmark\r\nall_ads$group1 <- \'All Networks\'\r\n\r\n#By Network Family\r\nall_ads$group2 <- \'Other\'\r\nall_ads$group2 <- all_ads$network_parent\r\n\r\n#By Network \r\nall_ads$group3 <- \'Other\'\r\nall_ads$group3 <- paste(all_ads$network_parent,"*",all_ads$network_name,sep="")\r\n\r\n#By Network By Daypart\r\nall_ads$group4 <- \'Other\'\r\nall_ads$group4 <- paste(all_ads$network_parent,"*",all_ads$network_name,"*",all_ads$daypart,sep="")\r\n\r\n#Benchmark by Daypart\r\nall_ads$group5 <- \'Other\'\r\nall_ads$group5 <- paste("All Networks*",all_ads$daypart,sep="")\r\n\r\nall_ads$custom_category <- \'Other\'\r\nall_ads$custom_category[which(all_ads$atlas_brand_name %in% c(\'DirecTV\',\'Xfinity\',\'Comcast\', \'Dish Network\',\'Spectrum\'))] <- \'MVPD Competitive Set\'\r\nall_ads$custom_category[which(all_ads$atlas_brand_name %in% c(\'Sling TV\',\'YouTube TV\',\'FuboTV\', \'Hulu + Live TV\',\'Philo\'))] <- \'vMVPD Competitive Set\'\r\n\r\n\r\n\r\n####\r\n####\r\n\r\n####################################################\r\n#### Helper Functions\r\n####################################################\r\n\r\ngenerate_afa <- function(df, ngroups = 1, benchmark_group, breakouts, bygroup = \'name_to_use,group\') {\r\n  group_to_use <- benchmark_group\r\n  \r\n  if(group_to_use != \'all\') {\r\n    ind <- which(df$group1 == group_to_use)\r\n  } else {\r\n    ind <- seq(1,nrow(df))\r\n  }\r\n  ser_avg <- exp(weighted_mean_with_exclude(log(df$norm_SER), w=sqrt(df$impressions/1e6*df$duration), q1=0.1, q2=0.9))\r\n  mean_imps <- mean(df$impressions) / 1e6\r\n  \r\n  # Calculate norm_SER and log_norm_SER using the benchmark average SER\r\n  df <- df %>% dplyr::mutate(norm_SER = .data$norm_SER * 100 / ser_avg,\r\n                             log_norm_SER = log(.data$norm_SER),\r\n                             name_to_use = breakouts)\r\n  \r\n  afa_final = data.table()\r\n  # Create summary table by each breakout(if specified) and group\r\n  for (i in 1:ngroups) {\r\n    bygroup_string = sub(\'group\', paste(\'group\', i, sep = \'\'), bygroup)\r\n    \r\n    afa=data.frame(as.data.table(df)[,list(\r\n      total_SEV=sum(sev, na.rm=T),\r\n      total_SEV_imps_adj=sum(sev / impressions_factor_to_adj, na.rm=T),\r\n      median_SEV=weightedMedian(sev / impressions_factor_to_adj, num_ads_to_count, na.rm=T),\r\n      mean_SEV=weighted.mean(sev, num_ads_to_count, na.rm=T),\r\n      mean_SER_all=exp(weighted_mean_with_exclude(log_norm_SER, num_ads_to_count*sqrt(grossed_impressions/1e6*duration), q1=0.1,q2=0.9)),\r\n      total_imps=sum(impressions/1e6, na.rm=T),\r\n      median_imps=weightedMedian(grossed_impressions/1e6, num_ads_to_count, na.rm=T),\r\n      mean_imps=weighted.mean(grossed_impressions/1e6, num_ads_to_count, na.rm=T),\r\n      num_ads=ceiling(min(length(unique(tv_ad_airings_id)), sum(num_ads_to_count))),\r\n      num_ads_to_use=ceiling(min(length(unique(tv_ad_airings_id)), sum(num_ads_to_count))),\r\n      mean_duration=weighted.mean(duration, grossed_impressions/1e6*num_ads_to_count),\r\n      weight_all=sum(num_ads_to_count*sqrt(impressions/1e6*duration), na.rm=T)\r\n    ),by=bygroup_string])\r\n    \r\n    \r\n    names(afa)[which(names(afa) == paste("group", i, sep = \'\'))] <- \'group\'\r\n    \r\n    assign(paste(\'afa\', i, sep = ""), afa)\r\n    afa_final = rbind(afa_final, afa)\r\n  }\r\n  \r\n  if(group_to_use == \'all\') {\r\n    afa_final = afa_final %>%\r\n      distinct() %>%\r\n      dplyr::group_by(.data$name_to_use) %>%\r\n      dplyr::mutate(ad_multiplier = .data$mean_SER_all / 100 * .data$mean_imps / mean(.data$mean_imps)) %>%\r\n      arrange(-mean_SER_all) %>%\r\n      ungroup()\r\n  } else {\r\n    afa_final = afa_final %>%\r\n      distinct() %>%\r\n      filter(!group %in% c(\'IGNORE\', \'Other\', \'Normal\')) %>%\r\n      group_by(name_to_use) %>%\r\n      dplyr::mutate(mean_SER_all = mean_SER_all * 100 / mean(mean_SER_all[group == group_to_use]),\r\n                    ad_multiplier = mean_SER_all / 100 * mean_imps / mean(mean_imps[group == group_to_use])) %>%\r\n      dplyr::arrange(name_to_use, -mean_SER_all) %>%\r\n      ungroup()\r\n  }\r\n  \r\n  bygroup_vars = unlist(strsplit(bygroup, ","))\r\n  afa_final <- afa_final %>% dplyr::select(all_of(bygroup_vars), num_ads, mean_imps, mean_SER_all, ad_multiplier)\r\n  return(afa_final)\r\n}\r\n\r\n# format_columns <- function(df, df_names, var_list=c("num_ads","mean_SER_all","ad_multiplier"), nads_filter = 0) {\r\nformat_columns <- function(df, df_names, var_list=c("num_ads","mean_SER_all","ad_multiplier"), nads_filter = 5) {\r\n  df <- df %>%\r\n    arrange(-mean_SER_all_alladv)\r\n  \r\n  for(i in seq_along(df_names)) {\r\n    vars_list = var_list\r\n    if(i != 1){\r\n      vars_list = paste(var_list, df_names[i], sep = \'_\') \r\n    }\r\n    df <- df %>% \r\n      mutate_at(vars_list[2:length(vars_list)], list(~ ifelse(!!sym(vars_list[1]) < nads_filter | is.na(!!sym(vars_list[1])), \'-\', .))) %>% \r\n      mutate_at(vars_list[1], list(~ ifelse(is.na(!!sym(vars_list[1])), 0, .)))\r\n  }\r\n  \r\n  df <- df %>% select(-(starts_with("mean_imps") & !ends_with("alladv"))) %>% \r\n    relocate(mean_imps_alladv, .before = num_ads)\r\n  return(df)\r\n}\r\n\r\nmerge_columns <- function(df_list, bygroup){\r\n  byvector <- unlist(strsplit(bygroup, ","))\r\n  \r\n  stopifnot(length(df_list) > 0)\r\n  combined <- df_list[[1]]\r\n  for(i in seq_along(df_list[-1])) {\r\n    this_df <- df_list[[i+1]]\r\n    df_name <- coalesce(names(df_list)[[i+1]], as.character(i+1))\r\n    combined <- merge(combined, this_df, by=byvector, all=T, suffix = c("",paste0("_",df_name)))\r\n  }\r\n  return(combined)\r\n}\r\n\r\ngenerate_upfront_page <- function(dataset, vars_to_use, values_to_use, benchmark_group = \'all\', ngroups=1,bygroup_var){\r\n  df_list <- list()\r\n  \r\n  for(i in seq_along(vars_to_use)){\r\n    print(paste("  ",letters[i], "Generating", values_to_use[[i]], "column..."))\r\n    df_list[[i]] <- generate_afa(df = dataset %>% filter(!!sym(vars_to_use[i]) == values_to_use[i]), benchmark_group = benchmark_group, ngroups=ngroups, breakouts = "All Airings", bygroup=bygroup_var)  \r\n  }\r\n  print(paste("  ",letters[length(vars_to_use) + 1], "Generating", "All Advertisers", "column..."))\r\n  df_list[[length(vars_to_use) + 1]] <- generate_afa(df = dataset, benchmark_group = benchmark_group, ngroups=ngroups, breakouts = "All Airings", bygroup=bygroup_var)\r\n  \r\n  names(df_list) <- c(tolower(values_to_use), "alladv")\r\n  \r\n  upfront_page <- merge_columns(df_list, bygroup_var)\r\n  upfront_page <- format_columns(upfront_page, names(df_list), var_list = c(\'num_ads\', \'mean_SER_all\', \'ad_multiplier\'))\r\n  upfront_page <- upfront_page %>% select(-starts_with(\'name_to_use\'))\r\n  return(upfront_page)\r\n}\r\n\r\n###\r\n####\r\n\r\ngenerate_upfront <- function(all_ads, vars_to_use, values_to_use, catplus) {\r\n  media_partner_analysis <- list()\r\n  \r\n  print("1. Generating ELTV Network Family Analysis")\r\n  media_partner_analysis[[1]] <- generate_upfront_page(all_ads %>% filter(!(network_name %in% spanish_networks)),\r\n                                                       vars_to_use = vars_to_use,\r\n                                                       values_to_use = values_to_use,\r\n                                                       benchmark_group = \'All Networks\',\r\n                                                       ngroups = 2,\r\n                                                       bygroup_var = \'name_to_use,group\') %>% \r\n    filter(num_ads_alladv >= 1) \r\n  \r\n  print("2. Generating ELTV Network Analysis")\r\n  media_partner_analysis[[2]] <- generate_upfront_page(all_ads %>% filter(!(network_name %in% spanish_networks)),\r\n                                                       vars_to_use = vars_to_use,\r\n                                                       values_to_use = values_to_use,\r\n                                                       benchmark_group = \'All Networks\',\r\n                                                       ngroups = 3,\r\n                                                       bygroup_var = \'name_to_use,group\') %>% \r\n    filter(num_ads_alladv >= 1)\r\n  \r\n  print("3. Generating SLTV Network Analysis")\r\n  media_partner_analysis[[3]] <- generate_upfront_page(all_ads %>% filter(network_name %in% spanish_networks),\r\n                                                       vars_to_use = vars_to_use,\r\n                                                       values_to_use = values_to_use,\r\n                                                       benchmark_group = \'All Networks\',\r\n                                                       ngroups = 3,\r\n                                                       bygroup_var = \'name_to_use,group\') %>%  \r\n    filter(num_ads_alladv >= 1)\r\n  \r\n  print("4. Generating ELTV Network-Daypart Analysis")\r\n  media_partner_analysis[[4]] <- generate_upfront_page(all_ads %>% filter(!(network_name %in% spanish_networks)),\r\n                                                       vars_to_use = vars_to_use,\r\n                                                       values_to_use = values_to_use,\r\n                                                       benchmark_group = \'All Networks\',\r\n                                                       ngroups = 5,\r\n                                                       bygroup_var = \'name_to_use,group\') %>%  \r\n    filter(num_ads_alladv >= 1)\r\n  \r\n  # Network\r\n  print("5. Generating SLTV Network-Daypart Analysis")\r\n  media_partner_analysis[[5]] <- generate_upfront_page(all_ads %>% filter(network_name %in% spanish_networks),\r\n                                                       vars_to_use = vars_to_use,\r\n                                                       values_to_use = values_to_use,\r\n                                                       benchmark_group = \'All Networks\',\r\n                                                       ngroups = 5,\r\n                                                       bygroup_var = \'name_to_use,group\') %>%  \r\n    filter(num_ads_alladv >= 1)\r\n  \r\n  \r\n  names(media_partner_analysis) <- c("eltv_network_family", "eltv_network", "sltv_network", "eltv_network_daypart", "sltv_network_daypart")\r\n  return(media_partner_analysis)\r\n}\r\n\r\n####################################################\r\n#### Define which advertiser to analyze for here \r\n####################################################\r\n## Options to use for category type:\r\n# analysis_category, atlas_parent_category, atlas_category_name\r\nprimary_brand <- "DirecTV"\r\nprimary_category <- unique((all_ads$atlas_category_name[which(all_ads$atlas_brand_name == primary_brand)]))\r\nprimary_category <- primary_category[!is.na(primary_category)]\r\nprint(primary_category)\r\n\r\n\r\nmedia_partner_analysis <- generate_upfront(all_ads, \r\n                                           values_to_use = c(\'DirecTV\',\'Xfinity\',\'Sling TV\', \'Dish Network\', \'MVPD Competitive Set\', \'vMVPD Competitive Set\'),\r\n                                           vars_to_use = c(\'atlas_brand_name\',\'atlas_brand_name\',\'atlas_brand_name\',\'atlas_brand_name\',\'custom_category\',\'custom_category\'),\r\n                                           catplus = FALSE\r\n)\r\n\r\n\r\nanalysis_fp <- file.path(Sys.getenv("CUSTOM_REPORTS_ROOT", "/Volumes/GoogleDrive/Shared drives/Custom Reports/"),"New Verticals/DirecTV/Custom Reports/2025-06-09 Media Planner")\r\n\r\ndir.create(analysis_fp, showWarnings = FALSE, recursive = TRUE)\r\n\r\nfor(i in seq_along(media_partner_analysis)) {\r\n  write_excel_csv(media_partner_analysis[[i]], file = file.path(analysis_fp, paste("2025-06-09 DirecTV Media Partner Analysis_", names(media_partner_analysis)[i], ".csv", sep = "")))\r\n}\r\n';
	return (
		<ReactDiffViewer
			oldValue={before}
			newValue={after}
			splitView={true}
			extraLinesSurroundingDiff={10}
			leftTitle={"Before (no mutual client support)"}
			rightTitle={"After (with mutual client support)"}
			disableWordDiff
		/>
	);
}

export { Page };
